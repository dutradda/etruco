Padrão de Codificação

1. Introdução

O objetivo deste documento é uma definição de algumas regras de codificação em C++.
Os Programas a serem desenvolvidos devem seguir as regras e recomendações:
Em ordem essa são as metas:

    * ter estilo consistente,
    * fácil de ler e entender,
    * ser portavel para outra arquiteturas,
    * estar livre dos tipos comuns de erros,
    * ser reutilizavel por outro programador. 
    * Otimizar o código
    
2. Extruturas de código
	.cc
	.hh
	.icc para inline
	Cada arquivo de include deve conter uma classe
	Cada classe deve ter um comentário introdutóri que defina o que ela faz
	Cada arquivo deve incluir um mecanismo que impede que contêm múltiplas inclusões do arquivo
	Ex:
	# ifndef FOO_HH
    # define FOO_HH

    / / O restante do arquivo

    # endif 

	/ / NÃO RECOMENDADO
    # include <.. / include / fnutt.h>

    / / NÃO GARANTIDO PARA TRABALHAR
    # include <sys/socket.h>

3. Nomes
	Variaveis , constantes, e as funções 1ª letra minuscula
	Os nomes dos tipos de dados abstractos, estruturas, typedefs, e enumerações começar com uma letra maiúscula
	Não usar _ no começo do nome
	Nomes grande e sufixos usar _ pra separar
	Variáveis muito utilizadas ter nome comprido pra identificar e facilitar o entendimento
	
4. Classes e Funções

	class String : private Object
   {
      public:
         String();                    // Default constructor
         String( const String& s );   // Copy constructor
         unsigned length() const;
         // ...
	~String();		      //Destrutor!!! antes do protected!
      protected:
         int checkIndex( unsigned index ) const;
         // ...
      private:
         unsigned noOfChars;
         // ...
   };

public,protected e private nessa ordem assim como primeiro o Default constructor e depois o Copy e depois os outros

Dados sempre PRIVATE usar os gets

 class SpecialAccount : public Account
   {
      public:
         int insertMoney();
         // int getAmountOfMoney();  No! Forbids ANY constant object to
         //                          access the amount of money.
         int getAmountOfMoney() const;   // Better!
         // ...
      private:
         int moneyAmount;
   };



Funções
void funcao (); //Não
void funcao(); //SIM

/ Right:
   int
   myComplicatedFunction( unsigned unsignedValue,
            int intValue,
            char* charPointerValue,
            int* intPointerValue,
            myClass* myClassPointerValue,
            unsigned* unsignedPointerValue );
   
   // Wrong:
   int
   myComplicatedFunction( unsigned unsignedValue, int intValue,
   char* charPointerValue, int* intPointerValue, myClass* myClassPointerValue,
   unsigned* unsignedPointerValue );

// OU

   myComplicatedFunction( unsigned unsignedValue, int intValue,char* charPointerValue, int* intPointerValue, myClass* myClassPointerValue,unsigned* unsignedPointerValue );

Codigos incompletos:
// No block at all - No!
   while ( /* Something */ );
   
   // Empty block - better!
   while ( /* Something */ )
   {
      // Empty !
   }

void func(string a);   chamada  func(a)     ineficiente pois cria uma nova varieável e depois a destroi
void func(string& a);   chamada func(a)    eficiente mas modifica o valor
void func(const string &a); chamada func(a)  eficiente e não modifica o valor 
Preferir as duas ultimas


5. Ultimas recomendações

Deletar arrays 
	delete vetor[];

Switch deve sempre ter um default


Nunca usar:
	GOTO
	MALLOC, realloc ou free
	conversoes CAST explicitas
	converter const pata nao-const

	
Bem acho que tá bom!!

Rian
	
		

 	  	 
